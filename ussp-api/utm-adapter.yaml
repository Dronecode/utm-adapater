---
openapi: '3.0.0'
info:
  title: 'QGCS UTM Adapter API specification'
  description: |-
    All the Interfaces for the QGCS UTM Adapter are, using these APIs, you can process data 
    
    Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
  version: '1.0.0'
servers:
  - url: 'https://virtserver.swaggerhub.com/cygnus2936/flight-blender/1.0.0'
    description: 'Flight Blender API'
security:
  - AuthFromPassport:
      - 'qgcs.utm_adapter.write'
      - 'qgcs.utm_adapter.read'
paths:
  /ping:
    get:
      summary: 'Server heartbeat operation'

      description: 'This operation is a ping to check if the server is running '

      security: []
      responses:
        '200':
          description: 'Server running normally'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PongResponse'

  /qgcs/flight_authorization: 


  /qgcs/submit_telemetry: 
                
components:
  securitySchemes:
    AuthFromPassport:
      type: oauth2
      description: |-
        UTM Adapter utilizes JWT tokens issued by a OAUTH server. This can be configured as an environment varaible. In this case we recommend using / deploying a Authorization Server: e.g. Flight Passport. For more information see https://id.openskies.sh

        Authorization from, or on behalf of, an authorization authority.  This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, and publish to all providers the public key for verifying that signature.
        The following fields shall be included in the JWT claim for access tokens issued by this authority:
        * `iss`, with the URL at which the token generation request was received.
        * `exp`, with a time no further than 1 hour in the future.
        * `sub`, with unique ID of the client requesting the access token.
        * `scope`, with an array of strings indicating the scopes granted.
        Multiple scopes for a single token shall be granted if requested.  The tokens granted by this authority shall protect against reuse of received tokens to impersonate the sender to other recipients (via use of the `aud` claim or other means).
        Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.
      flows:
        clientCredentials:
          tokenUrl: 'http://id.openskies.sh/oauth/token'
          scopes:
            blender.write: 'Write data into UTM Adapter'
            blender.read: 'Read data into UTM Adapter'

  schemas: 

    PongResponse:
      description: The server is running properly
      $ref: '#/components/schemas/Pong'


    Pong:
      properties:
        message:
          type: string
          example: Server running properly

